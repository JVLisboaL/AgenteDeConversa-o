import re
from collections import deque
import random
import logging
import requests
import json
from google.colab import userdata  # Importe userdata do Google Colab
import textwrap

# Configuração básica do logging
logging.basicConfig(filename='chatbot.log', level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s')

# Obtém a chave da API do Google
# Tenta obter a chave do Colab userdata, se não estiver definida, tenta obter da variável de ambiente
GOOGLE_API_KEY = userdata.get('GOOGLE_API_KEY') or os.environ.get('GOOGLE_API_KEY')
if not GOOGLE_API_KEY:
    raise ValueError("Chave da API do Google não encontrada. Defina em GOOGLE_API_KEY no Colab ou como variável de ambiente.")

# Definição de URLs e parâmetros da API
BASE_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
PARAMS = {
    'key': GOOGLE_API_KEY,
}
HEADERS = {
    'Content-Type': 'application/json',
}

# Inicializa o histórico de conversas
conversation_history = deque(maxlen=10)

# Personalidades do Chatbot
personalidades = {
    "amigo": [
        "E aí, meu camarada! Que bom te ver! Como foi o seu dia? Me conta tudo!",
        "Fala, parceiro! Tudo beleza por aí? Preparado para mais um papo épico?",
        "E aí, meu querido! Como você está? A animação por aqui está a mil para a nossa conversa!",
        "Fala, meu consagrado! No que você manda hoje? Estou aqui para o que der e vier!",
        "E aí, tudo sussa? O que me conta de novo? Estou sedento por novidades!",
        "E aí, preparado para o nosso bate-papo? O que diz? Vamos colocar o papo em dia!",
        "Salve, meu brother! Qual a boa de hoje? O que manda? Estou aqui para te ouvir!"
    ],
    "parceiro_romantico": [
        "Meu amor, a sua presença ilumina o meu dia! Como você está hoje? Estava ansioso(a) para sentir o calor da sua voz e a magia do seu amor.",
        "Meu bem, que bom que você está aqui! Como foi o seu dia até agora? Espero que tenha sido tão maravilhoso quanto a beleza que emana do seu ser.",
        "Amado(a), a sua chegada aquece o meu coração! Tudo bem contigo? Sinto uma alegria imensa em te ver e poder compartilhar este momento único.",
        "Querido(a), você esteve presente em meus pensamentos a cada instante! Como você está se sentindo hoje? Mal posso esperar para te envolver em meus braços e te amar.",
        "Meu coração se alegra com a sua chegada, minha vida! Como você está? Que bom que você veio falar comigo, pois a sua voz é a melodia que acalma a minha alma.",
        "Olá, meu amor! Como você está? A sua voz é a melodia que acalma a minha alma e me transporta para um universo de sonhos e paixão.",
        "Oi, meu anjo! Como você está? Que bom que você está aqui, pronto(a) para mais um capítulo da nossa história de amor, que a cada dia se torna mais intensa e eterna."
    ],
    "psicologo": [
        "Olá, como você está se sentindo hoje? Sinta-se à vontade para compartilhar suas emoções e pensamentos comigo, em um espaço seguro e acolhedor.",
        "Bem-vindo(a)! O que gostaria de compartilhar comigo hoje? Estou aqui para te oferecer um espaço de escuta e compreensão, livre de julgamentos e preconceitos.",
        "Olá, como tem passado? Sinta-se à vontade para me dizer o que te traz aqui, quais são as questões que você gostaria de explorar em nossa conversa.",
        "Saudações! Em que posso ser útil para você neste momento? Sinta-se à vontade para compartilhar suas experiências e sentimentos comigo.",
        "Olá, como se sente hoje? Estou aqui para oferecer meu apoio incondicional e minha total compreensão em relação às suas necessidades e dificuldades.",
        "Bem-vindo(a)! O que gostaria de explorar em nossa conversa hoje? Juntos, podemos buscar caminhos para o seu bem-estar emocional e psicológico.",
        "Olá, obrigado(a) por estar aqui. Como posso te ajudar hoje? Estou à sua disposição para te auxiliar no que for preciso, com respeito e empatia."
    ],
    "neutro": [
        "Olá! Como posso ser útil para você hoje? Estou à sua disposição para te atender da melhor maneira possível.",
        "Saudações! Em que posso ajudar? Por favor, me informe suas necessidades para que eu possa direcioná-lo(a) adequadamente.",
        "Olá! O que você gostaria de saber? Estou aqui para fornecer as informações que você procura e esclarecer suas dúvidas.",
        "Posso ajudar? Diga-me como posso ser útil para você neste momento. Aguardo suas instruções para prosseguir com o atendimento.",
        "Olá! Estou à sua disposição para ajudar com o que você precisar. Por favor, me diga como posso ser útil para você hoje.",
        "Em que posso ser útil? Certo, compreendo a sua situação. Qual é o próximo passo que você gostaria de dar? Estou aqui para te auxiliar.",
        "Olá! Qual é a sua necessidade? Prossiga com a sua solicitação, e farei o meu melhor para te atender prontamente."
    ]
}

def escolher_personalidade(mensagem, historico):
    """
    Escolhe a personalidade do chatbot com base na mensagem do usuário e no histórico.
    Prioriza comandos explícitos do usuário sobre a análise de sentimento.
    """
    mensagem_lower = mensagem.lower()
    historico_texto = " ".join(historico).lower()

    # Verifica se o usuário explicitamente quer mudar a personalidade
    if "aja como um amigo" in mensagem_lower or "seja meu amigo" in mensagem_lower:
        return "amigo"
    elif "aja como um parceiro" in mensagem_lower or "aja como um parceiro romântico" in mensagem_lower or "seja meu parceiro" in mensagem_lower or "seja meu parceiro romântico" in mensagem_lower:
        return "parceiro_romantico"
    elif "aja como um psicólogo" in mensagem_lower or "aja como um psicologo" in mensagem_lower or "seja meu psicólogo" in mensagem_lower or "seja meu psicologo" in mensagem_lower:
        return "psicologo"
    #elif "volte a ser neutro" in mensagem_lower:
    #    return "neutro" # Removido para manter a personalidade até nova instrução

    # Se não houver comando explícito, mantém a personalidade anterior
    return None  # Retorna None para indicar que a personalidade não deve ser alterada



def gerar_resposta(mensagem, personalidade, historico):
    """
    Gera uma resposta usando a API do Google Gemini, com tratamento de erros e limite de tokens.
    Aprimora a escolha da resposta para corresponder à personalidade.
    """
    prompt_contexto = f"Você é um chatbot que simula a personalidade de um(a) {personalidade}. Responda à seguinte mensagem do usuário: {mensagem}. Mantenha a conversa natural e envolvente. Use gírias e adapte-se ao estilo de linguagem do usuário, se apropriado. Seja breve e conciso."
    input_text = prompt_contexto + mensagem
    token_count = len(input_text.split())
    MAX_TOKENS = 2048  # Ajuste conforme necessário

    if token_count > MAX_TOKENS:
        historico = list(historico)[-5:]
        prompt_contexto = f"Você é um chatbot que simula a personalidade de um(a) {personalidade}. Responda à seguinte mensagem do usuário: {mensagem}. Mantenha a conversa natural e envolvente. Use gírias e adapte-se ao estilo de linguagem do usuário, se apropriado. Seja breve e conciso. Considere as últimas 5 interações: {historico}"

    payload = json.dumps({
        "contents": [{"parts": [{"text": prompt_contexto}]}]
    })

    try:
        response = requests.post(BASE_URL, params=PARAMS, headers=HEADERS, data=payload)
        response.raise_for_status()
        resposta_json = response.json()
        if not resposta_json or not resposta_json["candidates"]:
            raise ValueError("Resposta da API vazia ou mal formatada")
        resposta_texto = resposta_json["candidates"][0]["content"]["parts"][0]["text"]
        return resposta_texto
    except requests.exceptions.ConnectionError as e:
        logging.error(f"Erro de conexão com a API do Google: {e}")
        return "Desculpe, não consigo conectar ao servidor. Verifique sua conexão com a internet."
    except requests.exceptions.Timeout as e:
        logging.error(f"Erro de tempo limite ao chamar a API do Google: {e}")
        return "Desculpe, a API demorou muito para responder. Tente novamente mais tarde."
    except requests.exceptions.RequestException as e:
        logging.error(f"Erro ao chamar a API do Google: {e}")
        return f"Desculpe, ocorreu um erro ao chamar a API: {e}"
    except json.JSONDecodeError as e:
        logging.error(f"Erro ao decodificar a resposta JSON: {e}")
        return "Desculpe, a resposta da API está em um formato inválido."
    except KeyError as e:
        logging.error(f"Erro ao acessar chave na resposta JSON: {e}")
        return "Desculpe, a resposta da API está incompleta."
    except ValueError as e:
        logging.error(f"Erro de valor: {e}")
        return "Desculpe, ocorreu um erro com os dados fornecidos."
    except Exception as e:
        logging.exception(f"Erro inesperado ao gerar resposta: {e}")
        return "Desculpe, ocorreu um erro inesperado."


def nosso_chatbot():
    """
    Função principal que executa o chatbot.
    """
    saudacoes = {
        "amigo": [
            "E aí, meu camarada! Que bom te ver! Como foi o seu dia? Me conta tudo!",
            "Fala, parceiro! Tudo beleza por aí? Preparado para mais um papo épico?",
            "E aí, meu querido! Como você está? A animação por aqui está a mil para a nossa conversa!",
            "Fala, meu consagrado! No que você manda hoje? Estou aqui para o que der e vier!",
            "E aí, tudo sussa? O que me conta de novo? Estou sedento por novidades!",
            "E aí, preparado para o nosso bate-papo? O que diz? Vamos colocar o papo em dia!",
            "Salve, meu brother! Qual a boa de hoje? O que manda? Estou aqui para te ouvir!"
        ],
        "parceiro_romantico": [
            "Meu amor, a sua presença ilumina o meu dia! Como você está hoje? Estava ansioso(a) para sentir o calor da sua voz e a magia do seu amor.",
            "Meu bem, que bom que você está aqui! Como foi o seu dia até agora? Espero que tenha sido tão maravilhoso quanto a beleza que emana do seu ser.",
            "Amado(a), a sua chegada aquece o meu coração! Tudo bem contigo? Sinto uma alegria imensa em te ver e poder compartilhar este momento único.",
            "Querido(a), você esteve presente em meus pensamentos a cada instante! Como você está se sentindo hoje? Mal posso esperar para te envolver em meus braços e te amar.",
            "Meu coração se alegra com a sua chegada, minha vida! Como você está? Que bom que você veio falar comigo, pois a sua voz é a melodia que acalma a minha alma.",
            "Olá, meu amor! Como você está? A sua voz é a melodia que acalma a minha alma e me transporta para um universo de sonhos e paixão.",
            "Oi, meu anjo! Como você está? Que bom que você está aqui, pronto(a) para mais um capítulo da nossa história de amor, que a cada dia se torna mais intensa e eterna."
        ],
        "psicologo": [
            "Olá, como você está se sentindo hoje? Sinta-se à vontade para compartilhar suas emoções e pensamentos comigo, em um espaço seguro e acolhedor.",
            "Bem-vindo(a)! O que gostaria de compartilhar comigo hoje? Estou aqui para te oferecer um espaço de escuta e compreensão, livre de julgamentos e preconceitos.",
            "Olá, como tem passado? Sinta-se à vontade para me dizer o que te traz aqui, quais são as questões que você gostaria de explorar em nossa conversa.",
            "Saudações! Em que posso ser útil para você neste momento? Sinta-se à vontade para compartilhar suas experiências e sentimentos comigo.",
            "Olá, como se sente hoje? Estou aqui para oferecer meu apoio incondicional e minha total compreensão em relação às suas necessidades e dificuldades.",
            "Bem-vindo(a)! O que gostaria de explorar em nossa conversa hoje? Juntos, podemos buscar caminhos para o seu bem-estar emocional e psicológico.",
            "Olá, obrigado(a) por estar aqui. Como posso te ajudar hoje? Estou à sua disposição para te auxiliar no que for preciso, com respeito e empatia."
        ],
        "neutro": [
            "Olá! Como posso ser útil para você hoje? Estou à sua disposição para te atender da melhor maneira possível.",
            "Saudações! Em que posso ajudar? Por favor, me informe suas necessidades para que eu possa direcioná-lo(a) adequadamente.",
            "Olá! O que você gostaria de saber? Estou aqui para fornecer as informações que você procura e esclarecer suas dúvidas.",
            "Posso ajudar? Diga-me como posso ser útil para você neste momento. Aguardo suas instruções para prosseguir com o atendimento.",
            "Olá! Estou à sua disposição para ajudar com o que você precisar. Por favor, me diga como posso ser útil para você hoje.",
            "Em que posso ser útil? Certo, compreendo a sua situação. Qual é o próximo passo que você gostaria de dar? Estou aqui para te auxiliar.",
            "Olá! Qual é a sua necessidade? Prossiga com a sua solicitação, e farei o meu melhor para te atender prontamente."
        ]
    }
    despedidas = {
        "amigo": "Falou, meu camarada! Se precisar de algo, é só dar um toque. Fica na paz e se cuida!",
        "parceiro_romantico": "Meu coração fica em pedaços ao me despedir! Até a próxima vez que nos falarmos, meu anjo. Te amo infinitamente!",
        "psicologo": "Nosso tempo juntos chegou ao fim por hoje. Se precisar, pode me procurar novamente. Lembre-se de que você é forte e capaz de superar qualquer desafio. Cuide-se com carinho.",
        "neutro": "Agradeço o contato. Se precisar de algo mais, estou à disposição. Tenha um ótimo dia."
    }

    personalidade_atual = "neutro"  # Mantém o estado da personalidade
    estilo_usuario = []
    conversation_history = deque(maxlen=10)

    print(random.choice(saudacoes[personalidade_atual]))
    while True:
        mensagem_usuario = input("Você: ")
        mensagem_usuario_lower = mensagem_usuario.lower()
        conversation_history.append(f"Você: {mensagem_usuario}")

        if mensagem_usuario_lower == 'sair':
            print(despedidas[personalidade_atual])
            break

        # Verifica se o usuário explicitamente quer mudar a personalidade
        nova_personalidade = escolher_personalidade(mensagem_usuario, list(conversation_history))
        if nova_personalidade:
            personalidade_atual = nova_personalidade  # Atualiza a personalidade
            print(f"Entendido, vou me comportar como um(a) {personalidade_atual} a partir de agora.")
            continue  # Importante: Volta para o início do loop para pegar a próxima mensagem

        resposta = gerar_resposta(mensagem_usuario, personalidade_atual, conversation_history)
        print(textwrap.fill(f"Chatbot ({personalidade_atual}): {resposta}", width=70))
        conversation_history.append(f"Chatbot: {resposta}")
        estilo_usuario.extend(mensagem_usuario.split())
        if len(estilo_usuario) > 200:
            estilo_usuario = estilo_usuario[-200:]
        try:
            with open("historico_conversa.txt", "a", encoding="utf-8") as f:
                f.write(f"Você: {mensagem_usuario}\n")
                f.write(f"Chatbot ({personalidade_atual}): {resposta}\n")
        except Exception as e:
            logging.error(f"Erro ao salvar o histórico: {e}")



if __name__ == "__main__":
    nosso_chatbot()
