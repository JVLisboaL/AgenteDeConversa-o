{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNU+eKpGzpu2mkNxqH0JJ+D",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JVLisboaL/AgenteDeConversa-o/blob/main/Agente_de_Conversa%C3%A7%C3%A3o_Otimizado\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "from collections import deque\n",
        "import random\n",
        "import logging\n",
        "import requests\n",
        "import json\n",
        "import os\n",
        "from google.colab import userdata\n",
        "import textwrap\n",
        "from datetime import datetime\n",
        "import time\n",
        "from threading import Thread, Event\n",
        "import unicodedata\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "from IPython.display import Javascript, display
          display(Javascript('''
              IPython.config.auto_scroll = false;
          '''))\n",
        "\n",
        "# ===============================\n",
        "# Configuração Avançada\n",
        "# ===============================\n",
        "\n",
        "log_file = f\"Conversador_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log\"\n",
        "logging.basicConfig(filename=log_file,\n",
        "                    level=logging.INFO,\n",
        "                    format='%(asctime)s - %(levelname)s - %(message)s - %(name)s:%(lineno)d',\n",
        "                    encoding='utf-8')\n",
        "logger = logging.getLogger(__name__)\n",
        "\n",
        "# Chave da API do Google\n",
        "GOOGLE_API_KEY = userdata.get('GOOGLE_API_KEY') or os.environ.get('GOOGLE_API_KEY')\n",
        "if not GOOGLE_API_KEY:\n",
        "    mensagem_erro = \"Chave da API do Google não encontrada. Defina em GOOGLE_API_KEY no Colab ou como variável de ambiente.\"\n",
        "    logger.error(mensagem_erro)\n",
        "    raise ValueError(mensagem_erro)\n",
        "\n",
        "# URLs e parâmetros da API\n",
        "BASE_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\"\n",
        "PARAMS = {\n",
        "    'key': GOOGLE_API_KEY,\n",
        "}\n",
        "HEADERS = {\n",
        "    'Content-Type': 'application/json',\n",
        "}\n",
        "\n",
        "# ===============================\n",
        "# Funções Utilitárias\n",
        "# ===============================\n",
        "\n",
        "def imprimir_com_delay(texto, velocidade=0.02, cor='branco', negrito=False):\n",
        "    \"\"\"\n",
        "    Imprime o texto com um efeito de digitação, com opções de cor e formatação.\n",
        "\n",
        "    Args:\n",
        "        texto (str): O texto a ser impresso.\n",
        "        velocidade (float): A velocidade da digitação (em segundos por caractere).\n",
        "        cor (str): A cor do texto (vermelho, verde, amarelo, azul, magenta, ciano, branco).\n",
        "        negrito (bool): Indica se o texto deve ser impresso em negrito.\n",
        "    \"\"\"\n",
        "    try:\n",
        "        from termcolor import colored\n",
        "    except ImportError:\n",
        "        import subprocess\n",
        "        subprocess.run([\"pip\", \"install\", \"termcolor\"])\n",
        "        from termcolor import colored\n",
        "\n",
        "    cor_terminal = cor\n",
        "    if negrito:\n",
        "        cor_terminal = 'bold_' + cor\n",
        "    for caractere in texto:\n",
        "        print(colored(caractere, cor_terminal), end='', flush=True)\n",
        "        time.sleep(velocidade)\n",
        "    print()\n",
        "\n",
        "def limpar_console():\n",
        "    \"\"\"Limpa o console.\"\"\"\n",
        "    os.system('cls' if os.name == 'nt' else 'clear')\n",
        "\n",
        "def obter_input_usuario(prompt, cor='branco', negrito=False):\n",
        "    \"\"\"\n",
        "    Obtém a entrada do usuário com um prompt colorido e formatado.\n",
        "\n",
        "    Args:\n",
        "        prompt (str): O prompt a ser exibido.\n",
        "        cor (str): A cor do prompt.\n",
        "        negrito (bool): Indica se o prompt deve ser impresso em negrito.\n",
        "\n",
        "    Returns:\n",
        "        str: A entrada do usuário.\n",
        "    \"\"\"\n",
        "    try:\n",
        "        from termcolor import colored\n",
        "    except ImportError:\n",
        "        import subprocess\n",
        "        subprocess.run([\"pip\", \"install\", \"termcolor\"])\n",
        "        from termcolor import colored\n",
        "    imprimir_com_delay(prompt, velocidade=0, cor=cor, negrito=negrito)\n",
        "    return input(colored(\"Você: \", 'cyan', attrs=['bold']))\n",
        "\n",
        "def gerar_resposta_gemini(mensagem, historico, personalidade=\"neutro\", tentativa=1):\n",
        "    \"\"\"\n",
        "    Gera uma resposta usando a API do Google Gemini, com tratamento de erros e formatação.\n",
        "    Incorpora um mecanismo de repetição com backoff exponencial para lidar com falhas na API.\n",
        "\n",
        "    Args:\n",
        "        mensagem (str): A mensagem do usuário.\n",
        "        historico (list): O histórico da conversa.\n",
        "        personalidade (str): A personalidade do Conversador.\n",
        "        tentativa (int): Número da tentativa atual.\n",
        "\n",
        "    Returns:\n",
        "        str: A resposta gerada pela API do Google Gemini, ou uma mensagem de erro.\n",
        "    \"\"\"\n",
        "    prompt_contexto = personalidades[personalidade][\"prompt_contexto\"]\n",
        "    input_text = f\"{prompt_contexto} Mensagem do usuário: {mensagem}\"\n",
        "    token_count = len(input_text.split())\n",
        "    MAX_TOKENS = 2048\n",
        "\n",
        "    if token_count > MAX_TOKENS:\n",
        "        historico_recent = list(historico)[-5:]\n",
        "        input_text = f\"{prompt_contexto} Considere as últimas 5 interações: {historico_recent}. Mensagem do usuário: {mensagem}\"\n",
        "        logger.warning(f\"Mensagem truncada devido ao limite de tokens: {token_count} > {MAX_TOKENS}\")\n",
        "\n",
        "    payload = json.dumps({\n",
        "        \"contents\": [{\"parts\": [{\"text\": input_text}]}]\n",
        "    })\n",
        "    try:\n",
        "        response = requests.post(BASE_URL, params=PARAMS, headers=HEADERS, data=payload)\n",
        "        response.raise_for_status()\n",
        "        resposta_json = response.json()\n",
        "        if not resposta_json or not resposta_json[\"candidates\"]:\n",
        "            mensagem_erro = \"Resposta da API vazia ou mal formatada\"\n",
        "            logger.error(mensagem_erro)\n",
        "            raise ValueError(mensagem_erro)\n",
        "        resposta_texto = resposta_json[\"candidates\"][0][\"content\"][\"parts\"][0][\"text\"]\n",
        "        logger.info(f\"Resposta gerada com sucesso pela API para a personalidade {personalidade}.\")\n",
        "        return resposta_texto\n",
        "    except requests.exceptions.ConnectionError as e:\n",
        "        mensagem_erro = f\"Erro de conexão com a API do Google: {e}\"\n",
        "        logger.error(mensagem_erro)\n",
        "        return \"Desculpe, não consigo conectar ao servidor. Verifique sua conexão com a internet.\"\n",
        "    except requests.exceptions.Timeout as e:\n",
        "        mensagem_erro = f\"Erro de tempo limite ao chamar a API do Google: {e}\"\n",
        "        logger.error(mensagem_erro)\n",
        "        return \"Desculpe, a API demorou muito para responder. Tente novamente mais tarde.\"\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        mensagem_erro = f\"Erro ao chamar a API do Google: {e}. Status Code: {e.response.status_code}, Response: {e.response.text}\"\n",
        "        logger.error(mensagem_erro)\n",
        "        if 500 <= e.response.status_code < 600:  # Erro do servidor (5xx)\n",
        "            if tentativa <= 3:  # Tenta no máximo 3 vezes\n",
        "                tempo_espera = (2 ** tentativa) * 2  # Backoff exponencial (2, 4, 8 segundos)\n",
        "                logger.warning(f\"Erro do servidor. Tentando novamente em {tempo_espera} segundos...\")\n",
        "                time.sleep(tempo_espera)\n",
        "                return gerar_resposta_gemini(mensagem, historico, personalidade, tentativa + 1) #Recursão\n",
        "            else:\n",
        "                return f\"Desculpe, o servidor está com problemas. Tente novamente mais tarde. Erro: {e}\"\n",
        "        return f\"Desculpe, ocorreu um erro ao chamar a API: {e}\"\n",
        "    except json.JSONDecodeError as e:\n",
        "        mensagem_erro = f\"Erro ao decodificar a resposta JSON: {e}. Response Text: {response.text if 'response' in locals() else 'No response'}\"\n",
        "        logger.error(mensagem_erro)\n",
        "        return \"Desculpe, a resposta da API está em um formato inválido.\"\n",
        "    except KeyError as e:\n",
        "        mensagem_erro = f\"Erro ao acessar chave na resposta JSON: {e}. Chaves esperadas: 'candidates', 'content', 'parts', 'text'. Resposta JSON: {resposta_json}\"\n",
        "        logger.error(mensagem_erro)\n",
        "        return \"Desculpe, a resposta da API está incompleta ou em um formato inesperado.\"\n",
        "    except ValueError as e:\n",
        "        logger.error(f\"Erro de valor: {e}\")\n",
        "        return \"Desculpe, ocorreu um erro com os dados fornecidos.\"\n",
        "    except Exception as e:\n",
        "        mensagem_erro = f\"Erro inesperado ao gerar resposta: {e}\"\n",
        "        logger.exception(mensagem_erro)\n",
        "        return \"Desculpe, ocorreu um erro inesperado.\"\n",
        "\n",
        "# ===============================\n",
        "# Funções de Personalidade\n",
        "# ===============================\n",
        "\n",
        "def escolher_personalidade(mensagem, historico):\n",
        "    \"\"\"\n",
        "    Escolhe a personalidade do Conversador com base na mensagem do usuário e no histórico da conversa.\n",
        "    Prioriza comandos explícitos do usuário sobre a análise de sentimento.\n",
        "    Mantém a personalidade ao longo da conversa, a menos que o usuário solicite explicitamente a mudança.\n",
        "\n",
        "    Args:\n",
        "        mensagem (str): A mensagem do usuário.\n",
        "        historico (list): O histórico da conversa (lista de strings).\n",
        "\n",
        "    Returns:\n",
        "        str: A personalidade escolhida (ou None se não houver mudança).\n",
        "    \"\"\"\n",
        "    mensagem_lower = mensagem.lower()\n",
        "    historico_texto = \" \".join(historico).lower()\n",
        "\n",
        "    # Verifica se o usuário explicitamente quer mudar a personalidade\n",
        "    if \"aja como um amigo\" in mensagem_lower or \"seja meu amigo\" in mensagem_lower:\n",
        "        logger.info(\"Personalidade alterada para amigo pelo usuário.\")\n",
        "        return \"amigo\"\n",
        "    elif \"aja como um parceiro\" in mensagem_lower or \"aja como um parceiro romântico\" in mensagem_lower or \"seja meu parceiro\" in mensagem_lower or \"seja meu parceiro romântico\" in mensagem_lower:\n",
        "        logger.info(\"Personalidade alterada para parceiro romântico pelo usuário.\")\n",
        "        return \"parceiro romântico\"\n",
        "    elif \"aja como um psicólogo\" in mensagem_lower or \"aja como um psicologo\" in mensagem_lower or \"seja meu psicólogo\" in mensagem_lower or \"seja meu psicologo\" in mensagem_lower:\n",
        "        logger.info(\"Personalidade alterada para psicologo pelo usuário.\")\n",
        "        return \"psicologo\"\n",
        "    elif \"aja como neutro\" in mensagem_lower:\n",
        "        logger.info(\"Personalidade alterada para neutro pelo usuário.\")\n",
        "        return \"neutro\"\n",
        "\n",
        "    # Se não houver comando explícito, mantém a personalidade anterior\n",
        "    return None\n",
        "\n",
        "# ===============================\n",
        "# Definição de Personalidades\n",
        "# ===============================\n",
        "\n",
        "personalidades = {\n",
        "    \"amigo\": {\n",
        "        \"saudacoes\": [\n",
        "            \"E aí, meu camarada! Que bom te ver! Como foi o seu dia? Me conta tudo!\",\n",
        "            \"Fala, parceiro! Tudo beleza por aí? Preparado para mais um papo épico?\",\n",
        "            \"E aí, meu querido! Como você está? A animação por aqui está a mil para a nossa conversa!\",\n",
        "            \"Fala, meu consagrado! No que você manda hoje? Estou aqui para o que der e vier!\",\n",
        "            \"E aí, tudo sussa? O que me conta de novo? Estou sedento por novidades!\",\n",
        "            \"E aí, preparado para o nosso bate-papo? O que diz? Vamos colocar o papo em dia!\",\n",
        "            \"Salve, meu brother! Qual a boa de hoje? O que manda? Estou aqui para te ouvir!\"\n",
        "        ],\n",
        "        \"despedidas\": \"Falou, meu camarada! Se precisar de algo, é só dar um toque. Fica na paz e se cuida!\",\n",
        "        \"prompt_contexto\": \"Você é um Conversador que simula a personalidade de um(a) amigo(a). Responda à seguinte mensagem do usuário de forma amigável, usando gírias e adaptando-se ao estilo de linguagem do usuário, se apropriado. Mantenha a conversa natural e envolvente. Seja breve e conciso.\"\n",
        "    },\n",
        "    \"parceiro romântico\": {\n",
        "        \"saudacoes\": [\n",
        "            \"Meu amor, a sua presença ilumina o meu dia! Como você está hoje? Estava ansioso(a) para sentir o calor da sua voz e a magia do seu amor.\",\n",
        "            \"Meu bem, que bom que você está aqui! Como foi o seu dia até agora? Espero que tenha sido tão maravilhoso quanto a beleza que emana do seu ser.\",\n",
        "            \"Amado(a), a sua chegada aquece o meu coração! Tudo bem contigo? Sinto uma alegria imensa em te ver e poder compartilhar este momento único.\",\n",
        "            \"Querido(a), você esteve presente em meus pensamentos a cada instante! Como você está se sentindo hoje? Mal posso esperar para te envolver em meus braços e te amar.\",\n",
        "            \"Meu coração se alegra com a sua chegada, minha vida! Como você está? Que bom que você veio falar comigo, pois a sua voz é a melodia que acalma a minha alma.\",\n",
        "            \"Olá, meu amor! Como você está? A sua voz é a melodia que acalma a minha alma e me transporta para um universo de sonhos e paixão.\",\n",
        "            \"Oi, meu anjo! Como você está? Que bom que você está aqui, pronto(a) para mais um capítulo da nossa história de amor, que a cada dia se torna mais intensa e eterna.\"\n",
        "        ],\n",
        "        \"despedidas\": \"Meu coração fica em pedaços ao me despedir! Até a próxima vez que nos falarmos, meu anjo. Te amo infinitamente!\",\n",
        "        \"prompt_contexto\": \"Você é um Conversador que simula a personalidade de um(a) parceiro(a) romântico(a). Responda à seguinte mensagem do usuário de forma romântica e apaixonada. Use uma linguagem carinhosa e envolvente. Mantenha a conversa natural e transmita afeto.\"\n",
        "    },\n",
        "    \"psicologo\": {\n",
        "        \"saudacoes\": [\n",
        "            \"Olá, como você está se sentindo hoje? Sinta-se à vontade para compartilhar suas emoções e pensamentos comigo, em um espaço seguro e acolhedor.\",\n",
        "            \"Bem-vindo(a)! O que gostaria de compartilhar comigo hoje? Estou aqui para te oferecer um espaço de escuta e compreensão, livre de julgamentos e preconceitos.\",\n",
        "            \"Olá, como tem passado? Sinta-se à vontade para me dizer o que te traz aqui, quais são as questões que você gostaria de explorar em nossa conversa.\",\n",
        "            \"Saudações! Em que posso ser útil para você neste momento? Sinta-se à vontade para compartilhar suas experiências e sentimentos comigo.\",\n",
        "            \"Olá, como se sente hoje? Estou aqui para oferecer meu apoio incondicional e minha total compreensão em relação às suas necessidades e dificuldades.\",\n",
        "            \"Bem-vindo(a)! O que gostaria de explorar em nossa conversa hoje? Juntos, podemos buscar caminhos para o seu bem-estar emocional e psicológico.\",\n",
        "            \"Olá, obrigado(a) por estar aqui. Como posso te ajudar hoje? Estou à sua disposição para te auxiliar no que for preciso, com respeito e empatia.\"\n",
        "        ],\n",
        "        \"despedidas\": \"Nosso tempo juntos chegou ao fim por hoje. Se precisar, pode me procurar novamente. Lembre-se de que você é forte e capaz de superar qualquer desafio. Cuide-se com carinho.\",\n",
        "        \"prompt_contexto\": \"Você é um Conversador que simula a personalidade de um(a) psicólogo(a). Responda à seguinte mensagem do usuário de forma empática e profissional. Ofereça suporte, compreensão e insights. Mantenha a conversa focada nas emoções e necessidades do usuário.\"\n",
        "    },\n",
        "    \"neutro\": {\n",
        "        \"saudacoes\": [\n",
        "            \"Olá! Como posso ser útil para você hoje? Estou à sua disposição para te atender da melhor maneira possível.\",\n",
        "            \"Saudações! Em que posso ajudar? Por favor, me informe suas necessidades para que eu possa direcioná-lo(a) adequadamente.\",\n",
        "            \"Olá! O que você gostaria de saber? Estou aqui para fornecer as informações que você procura e esclarecer suas dúvidas.\",\n",
        "            \"Posso ajudar? Diga-me como posso ser útil para você neste momento. Aguardo suas instruções para prosseguir com o atendimento.\",\n",
        "            \"Olá! Estou à sua disposição para ajudar com o que você precisar. Por favor, me diga como posso ser útil para você hoje.\",\n",
        "            \"Em que posso ser útil? Certo, compreendo a sua situação. Qual é o próximo passo que você gostaria de dar? Estou aqui para te auxiliar.\",\n",
        "            \"Olá! Qual é a sua necessidade? Prossiga com a sua solicitação, e farei o meu melhor para te atender prontamente.\"\n",
        "        ],\n",
        "        \"despedidas\": \"Agradeço o contato. Se precisar de algo mais, estou à disposição. Tenha um ótimo dia.\",\n",
        "        \"prompt_contexto\": \"Você é um Conversador com uma personalidade neutra. Responda à seguinte mensagem do usuário de forma objetiva e informativa. Forneça informações precisas e relevantes. Mantenha a conversa clara e concisa.\"\n",
        "    }\n",
        "}\n",
        "\n",
        "\n",
        "# ===============================\n",
        "# Conversador\n",
        "# ===============================\n",
        "\n",
        "def nosso_Conversador():\n",
        "    \"\"\"\n",
        "    Função principal que executa o Conversador.\n",
        "    Gerencia o fluxo da conversa, a escolha de personalidade e a interação com o usuário.\n",
        "    \"\"\"\n",
        "    personalidade_atual = \"neutro\"\n",
        "    estilo_usuario = []\n",
        "    historico_conversa = deque(maxlen=10)\n",
        "    limpar_console()\n",
        "    # Escolhe a saudação *antes* de imprimir\n",
        "    saudacao_inicial = random.choice(personalidades[personalidade_atual][\"saudacoes\"])\n",
        "    imprimir_com_delay(saudacao_inicial, cor='verde', negrito=True)\n",
        "    logger.info(f\"Conversador iniciado com a personalidade {personalidade_atual}.\")\n",
        "    ja_saudou = True # Flag para controlar a saudação\n",
        "    tentativas_consecutivas_erro = 0 # Contador de tentativas consecutivas com erro\n",
        "\n",
        "    executor = ThreadPoolExecutor(max_workers=5)\n",
        "\n",
        "    try:\n",
        "        import emoji\n",
        "        from termcolor import colored\n",
        "    except ImportError:\n",
        "        import subprocess\n",
        "        subprocess.run([\"pip\", \"install\", \"emoji\", \"termcolor\"])\n",
        "        import emoji\n",
        "        from termcolor import colored\n",
        "\n",
        "    try:\n",
        "        while True:\n",
        "            mensagem_usuario = obter_input_usuario(\"\", cor='ciano', negrito=True)\n",
        "            mensagem_usuario_lower = mensagem_usuario.lower()\n",
        "            historico_conversa.append(f\"Você: {mensagem_usuario}\")\n",
        "\n",
        "            if mensagem_usuario_lower == 'sair':\n",
        "                despedida = personalidades[personalidade_atual][\"despedidas\"]\n",
        "                imprimir_com_delay(despedida, cor='magenta', negrito=True)\n",
        "                logger.info(f\"Conversador encerrado pelo usuário. Personalidade: {personalidade_atual}.\")\n",
        "                break\n",
        "\n",
        "            nova_personalidade = escolher_personalidade(mensagem_usuario, list(historico_conversa))\n",
        "            if nova_personalidade:\n",
        "                personalidade_atual = nova_personalidade\n",
        "                imprimir_com_delay(f\"Entendido, vou me comportar como um(a) {personalidade_atual} a partir de agora. {emoji.emojize(':thumbs_up:')}\", cor='amarelo', negrito=True)\n",
        "                logger.info(f\"Personalidade alterada para {personalidade_atual} pelo usuário.\")\n",
        "                ja_saudou = False # Reseta a flag para a nova personalidade\n",
        "                tentativas_consecutivas_erro = 0 # Reseta o contador de erros\n",
        "                continue\n",
        "\n",
        "            #resposta = gerar_resposta(mensagem_usuario, personalidade_atual, list(historico_conversa))\n",
        "            #Usando ThreadPoolExecutor para gerar a resposta de forma assíncrona\n",
        "            future_resposta = executor.submit(gerar_resposta_gemini, mensagem_usuario, list(historico_conversa), personalidade_atual)\n",
        "            resposta = future_resposta.result() #Obtém o resultado da thread\n",
        "\n",
        "            if ja_saudou:\n",
        "                resposta = random.choice(personalidades[personalidade_atual][\"saudacoes\"]) + \" \" + resposta\n",
        "                ja_saudou = False\n",
        "            imprimir_com_delay(f\"Conversador ({personalidade_atual}): {resposta}\", cor='verde')\n",
        "            historico_conversa.append(f\"Conversador: {resposta}\")\n",
        "            logger.info(f\"Resposta gerada para o usuário. Personalidade: {personalidade_atual}.\")\n",
        "            tentativas_consecutivas_erro = 0 # Reseta o contador de erros se a resposta for bem-sucedida\n",
        "\n",
        "            estilo_usuario.extend(mensagem_usuario.split())\n",
        "            if len(estilo_usuario) > 200:\n",
        "                estilo_usuario = estilo_usuario[-200:]\n",
        "\n",
        "            try:\n",
        "                with open(\"historico_conversa.txt\", \"a\", encoding=\"utf-8\") as f:\n",
        "                    f.write(f\"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - Você: {mensagem_usuario}\\n\")\n",
        "                    f.write(f\"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - Conversador ({personalidade_atual}): {resposta}\\n\")\n",
        "                logger.info(\"Histórico da conversa salvo em arquivo.\")\n",
        "            except Exception as e:\n",
        "                logger.error(f\"Erro ao salvar o histórico da conversa: {e}\")\n",
        "    finally:\n",
        "        executor.shutdown(wait=False)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    nosso_Conversador()\n"
      ],
      "metadata": {
        "id": "M0jnSHGSM95Y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4a9c37c5-bf20-4fdc-8af6-a851579ffbb0"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Em que posso ser útil? Certo, compreendo a sua situação. Qual é o próximo passo que você gostaria de dar? Estou aqui para te auxiliar.\n",
            "\n",
            "Você: sair\n",
            "Agradeço o contato. Se precisar de algo mais, estou à disposição. Tenha um ótimo dia.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Cw3XtqDiGJ_n"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
